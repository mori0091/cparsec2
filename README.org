# -*- coding: utf-8-unix -*-
#+STARTUP: showall indent

* CPARSEC2 - a parser combinator library for C language

This project is an exercise to construct *parsec* like library for C11.

** How to make your parser

Let's create a parser named ~digit3~, which parses three digits.

*** Step 1. Define your function body of your parser.
#+begin_src c
  #include "cparsec2.h"

  StringResult run_digit3(void *arg, Source src) {
    /* omit 'arg' since 'digit3' use no arguments */
    UNUSED(arg);

    Buffer str = buf_new();
    for (int i = 0; i < 3; ++i) {
      CharResult c = parse(digit, src);
      if (c.error) return (StringResult){.error = c.error};
      buf_push(&str, c.result);
    }
    return (StringResult){.result = buf_finish(&str)};
  }
#+end_src

*** Step 2. Create parser by calling genParser(fun, arg)
#+begin_src c
  StringParser digit3 = genParser(run_digit3, NULL);
#+end_src

*** Step 3. Then use your parser.
#+begin_src c
  PARSE_TEST(digit3, "1234");   /* -> "123" */
  PARSE_TEST(digit3, "123");    /* -> "123" */
  PARSE_TEST(digit3, "12");     /* -> "error:too short" */
  PARSE_TEST(digit3, "a123");   /* -> "error:not satisfy" */
#+end_src

*** Finally, you can get the 1st example as follows:
#+begin_src c
  #include "cparsec2.h"

  StringResult run_digit3(void *arg, Source src) {
    /* omit 'arg' since 'digit3' use no arguments */
    UNUSED(arg);

    Buffer str = buf_new();
    for (int i = 0; i < 3; ++i) {
      CharResult c = parse(digit, src);
      if (c.error) return (StringResult){.error = c.error};
      buf_push(&str, c.result);
    }
    return (StringResult){.result = buf_finish(&str)};
  }

  int main(int argc, char **argv) {
    UNUSED(argc);
    UNUSED(argv);

    /* NOTE: THIS MUST BE CALLED ONCE AT FIRST. */
    cparsec2_init();

    StringParser digit3 = genParser(run_digit3, NULL);
    PARSE_TEST(digit3, "1234");   /* -> "123" */
    PARSE_TEST(digit3, "123");    /* -> "123" */
    PARSE_TEST(digit3, "12");     /* -> "error:too short" */
    PARSE_TEST(digit3, "a123");   /* -> "error:not satisfy" */

    return 0;
  }
#+end_src

** API
- cparsec2_init()       :: 
     Initialize cparsec2 library.\\
     This must be called once at first.
- parse(p, src)         :: 
     Apply parser ~p~ to text provided from ~src~, and return result.
- parseTest(p, string)  :: 
     Apply parser ~p~ to ~string~ and print result.
- PARSE_TEST(p, string) :: 
     Same as ~parseTest~ and also print ~p string~. (for debug purpose)
- genParser(f, arg)     :: 
     Create new parser.\\
     ~f~ is a function body of the parser, and ~arg~ is argument (may be NULL)
     to be passed to ~f~ when the parser is applied.

** CharParser
- anyChar               :: 
     A CharParser which parse any one char
- digit                 :: 
     A CharParser which parse a digit (i.e. ~0~ .. ~9~)
- lower                 :: 
     A CharParser which parse a lower-case char (i.e. ~a~ .. ~z~)
- upper                 :: 
     A CharParser which parse a upper-case char (i.e. ~A~ .. ~Z~)
- alpha                 :: 
     A CharParser which parse an alphabet char (i.e. ~a~ .. ~z~, ~A~ .. ~Z~)
- alnum                 :: 
     A CharParser which parse a digit or an alphabet char (i.e. ~0~ .. ~9~, ~a~ .. ~z~, ~A~ .. ~Z~)
- letter                :: 
     A CharParser which parse underscore or an alphabet char (i.e. ~_~, ~a~ .. ~z~, ~A~ .. ~Z~)
- char1(c)              :: 
     Create a CharParser which parse the char ~c~
- satisfy(pred)         :: 
     Create a CharParser which parse a char ~c~ satisfying ~pred(c) == true~

** StringParser
- many(p)               :: 
     Create a StringParser which parse zero or more chars.\\
     A CharParser ~p~ is used to parse for each char.
- many1(p)              :: 
     Create a StringParser which parse one or more chars.\\
     A CharParser ~p~ is used to parse for each char.
- seq(p, ...)           :: 
     Create a StringParser which parse a sequence of chars.\\
     Each CharParser in the list of arguments ~p, ...~ is used to parse for each char.
- cons(p, ps)           :: 
     Create a StringParser which parse a sequence of chars.\\
     A CharParser ~p~ is used to parse the 1st char, and a StringParser ~ps~ is
     used to parse subsequent chars.
